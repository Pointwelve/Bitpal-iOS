# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
setup_travis

platform :ios do
  desc '⚙️ Encrypt configuration using `gpg`. Default directory is `Resources/Configurations`.'\
       'Recommended to encrypt any secrets e.g **API_KEYS, configuration json/plist** to avoid checking in these file in git'\
       'By using gpg, we can encrypt any files with a **passphrase** and it will be in `.gpg` binary format.'\
       'User is able to use the decrypt the files by providing a passphrase using gpg". '\
       'You can refer to the `encrypt_configurations` method on how to encrypt the files. '\
       'e.g . `gpg --batch --yes --passphrase YOUR_PASSPHRASE --output \"YOUR_INPUT_FILE\" -c \"YOUR_OUTPUT_FILE_.GPG\`'
  lane :encrypt_configs do
    encrypt_configurations
  end

  desc '⚙️ Decrypt configuration using `gpg`. Default directory is `Resources/Configurations`.'\
  'By using gpg, we can decrypt all `.gpg` files by providing a passphrase to it.'\
  'The decrypt_configs lane will be run on every setup lane to enable initial setup.'\
  'You can refer to the `decrypt_configurations` method on how to encrypt the files.'\
  'e.g . `gpg --batch --yes --passphrase YOUR_PASSPHRASE --output \"YOUR_INPUT_FILE.GPG\" --decrypt \"YOUR_OUTPUT_FILE\`'
  lane :decrypt_configs do
    decrypt_configurations
  end

  desc '⚙️ Bootstrap and download Carthage dependencies . This will download depedencies following the Cartfile.lock.'\
       '**Note: This will not update the dependencies.**'
  lane :carthage_bootstrap do
    carthage_bootstrap
  end

  desc "⚙️ Setup dependencies and tools to get ready for development."
  lane :setup do
    setup
  end

  desc "⚙️ build and test"
  lane :build do
    decrypt_configurations
    carthage_bootstrap
    matchCerts
    
    scan(
      project: "Bitpal.xcodeproj",
      scheme: "App",
      clean: true,
      devices: ["iPhone 11 Pro"]
    )
  end

  lane :certificates do
    decrypt_configurations
    matchCerts
  end

  desc "⚙️ release"
  lane :release do
    isReleasable = analyze_commits(match: '*')

    if !isReleasable 
      UI.message("Release not required.")
      next
    else
      decrypt_configurations
      carthage_bootstrap
      version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
      build = sh("cd ..; git rev-list --all --count")
      increment_version_number(version_number: version, 
        xcodeproj: "Bitpal.xcodeproj")
      increment_build_number(build_number: build, xcodeproj: "Bitpal.xcodeproj")
      matchCerts
      build_app(
        project: "Bitpal.xcodeproj",
        scheme: "Bitpal",
        include_bitcode: true,
        include_symbols: true,
        clean: true,
        export_options: {
          provisioningProfiles: { 
            "com.pointwelve.app.bitpal" => "match AppStore com.pointwelve.app.bitpal",
            "com.pointwelve.app.bitpal.today" => "match AppStore com.pointwelve.app.bitpal.today",
            "com.pointwelve.app.bitpal.Notification-Service-Extension" => "match AppStore com.pointwelve.app.bitpal.Notification-Service-Extension"
           }
       }
      )
      upload_to_testflight(skip_submission: true, skip_waiting_for_build_processing: true, verbose: true)

      tag_main(version)
    end
  end

  def tag_main(version)
    reset_git_repo(force: true, skip_clean: true)
    add_git_tag(tag: "#{version}")
    push_to_git_remote(
      remote_branch: "main",
      tags: true
    )
  end
  def encrypt_configurations
    if is_ci?
      UI.message("Getting encryption paraphrase from environment variable:..")
      passphrase = ENV["UNICORN"]
    else
      UI.message("Getting encryption paraphrase from prompt:..")
      passphrase = prompt(text: "Paraphrase to decrypt configs: ")
    end

    Dir.chdir("..") do
      # Encrypt Google Cloud Config
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"gc_keys.gpg\" -c \"gc_keys.json\"", log: false)
    end

    Dir.chdir("..") do
      # Encrypt Auth0 configs
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Firebase/unicorn.gpg\" -c \"Firebase/Firebase.plist\"", log: false)
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Configuration/unicorn.gpg\" -c \"Configuration/Configuration.plist\"", log: false)
    end
  end

  def decrypt_configurations
    if is_ci?
      UI.message("Getting encryption paraphrase from environment variable:..")
      passphrase = ENV["UNICORN"]
      UI.error("Passphrase not found in environment!") if passphrase.nil? || passphrase.empty?
    else
      UI.message("Getting encryption paraphrase from prompt:..")
      passphrase = ENV["UNICORN"] || UI.password("Paraphrase to decrypt configs: ")
    end

    Dir.chdir("..") do
      # Encrypt Google Cloud Config
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"gc_keys.json\" --decrypt \"gc_keys.gpg\"", log: false)
    end

    Dir.chdir("..") do
      # Decrypt Auth0 configs
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Firebase/Firebase.plist\" --decrypt \"Firebase/unicorn.gpg\"", log: false)
      sh("gpg --batch --yes --passphrase #{passphrase} --output \"Configuration/Configuration.plist\" --decrypt \"Configuration/unicorn.gpg\"", log: false)
    end
  end

  def setup
    decrypt_configurations
    Dir.chdir("..") do
      sh("open Bitpal.xcodeproj")
    end
  end

  def carthage_bootstrap
    carthage(
      command: "bootstrap",
      use_ssh: false,
      verbose: false,
      platform: "iOS",
      configuration: "Release",
      cache_builds: true,
    )
  end

  def matchCerts 
    match(type: "development", 
      app_identifier: ["com.pointwelve.app.bitpal", 
        "com.pointwelve.app.bitpal.today", 
        "com.pointwelve.app.bitpal.Notification-Service-Extension"],
         readonly: is_ci)
    match(type: "adhoc", 
      app_identifier: ["com.pointwelve.app.bitpal", 
        "com.pointwelve.app.bitpal.today", 
        "com.pointwelve.app.bitpal.Notification-Service-Extension"],
         readonly: is_ci)
    match(type: "appstore", 
      app_identifier: ["com.pointwelve.app.bitpal", 
        "com.pointwelve.app.bitpal.today", 
        "com.pointwelve.app.bitpal.Notification-Service-Extension"],
         readonly: is_ci)
  end
end
