//
//  PortfolioViewUITests.swift
//  Bitpal-v2Tests
//
//  Created by Ryne Cheow on 20/7/25.
//

import XCTest
import SwiftData
@testable import Bitpal_v2

@MainActor
final class PortfolioViewUITests: XCTestCase {
    
    private var container: ModelContainer!
    private var context: ModelContext!
    private var portfolioService: PortfolioService!
    
    override func setUp() async throws {
        try await super.setUp()
        
        // Create in-memory container for testing
        let config = ModelConfiguration(isStoredInMemoryOnly: true)
        container = try ModelContainer(
            for: Portfolio.self, Holding.self, Transaction.self, Currency.self,
            configurations: config
        )
        context = container.mainContext
        
        // Create mock portfolio service
        portfolioService = PortfolioService.shared
        portfolioService.setModelContext(context)
    }
    
    override func tearDown() async throws {
        container = nil
        context = nil
        portfolioService = nil
        try await super.tearDown()
    }
    
    // MARK: - Test Data Creation
    
    private func createTestCurrency(symbol: String = "BTC", name: String = "Bitcoin") -> Currency {
        let currency = Currency(
            id: symbol.lowercased(),
            symbol: symbol,
            name: name,
            slug: symbol.lowercased(),
            isActive: true,
            rank: 1
        )
        context.insert(currency)
        return currency
    }
    
    private func createTestPortfolio(name: String = "Test Portfolio", isDefault: Bool = true) -> Portfolio {
        let portfolio = Portfolio(name: name, isDefault: isDefault)
        context.insert(portfolio)
        return portfolio
    }
    
    private func createTestHolding(
        portfolio: Portfolio,
        currency: Currency,
        quantity: Double = 1.0,
        averageCost: Double = 50000.0
    ) -> Holding {
        let holding = Holding(
            portfolio: portfolio,
            currency: currency,
            quantity: quantity,
            averageCost: averageCost
        )
        context.insert(holding)
        return holding
    }
    
    private func createTestTransaction(
        portfolio: Portfolio,
        currency: Currency,
        type: TransactionType = .buy,
        quantity: Double = 0.5,
        price: Double = 55000.0
    ) -> Transaction {
        let transaction = Transaction(
            portfolio: portfolio,
            currency: currency,
            type: type,
            quantity: quantity,
            price: price,
            fee: 25.0
        )
        context.insert(transaction)
        return transaction
    }
    
    // MARK: - Empty State Tests
    
    func testEmptyState_WhenNoPortfolios_ShowsEmptyPortfolioView() throws {
        // Given: No portfolios in the system
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show empty portfolio state
        XCTAssertNoThrow(try rendered.find(text: "No Portfolio"))
        XCTAssertNoThrow(try rendered.find(text: "Create your first portfolio to start tracking your cryptocurrency investments"))
        XCTAssertNoThrow(try rendered.find(button: "Create Portfolio"))
        
        // Should show chart pie icon
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "chart.pie"
        }))
    }
    
    func testEmptyStateButton_WhenTapped_ShowsCreatePortfolioSheet() throws {
        // Given: Empty portfolio view
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When: Tapping "Create Portfolio" button
        let createButton = try rendered.find(button: "Create Portfolio")
        try createButton.tap()
        
        // Then: Should present create portfolio sheet
        XCTAssertTrue(true) // Placeholder - in practice would verify sheet presentation
    }
    
    // MARK: - Navigation Tests
    
    func testNavigationTitle_ShowsPortfolio() throws {
        // Given: PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When/Then: Should have correct navigation title
        let navigationStack = try rendered.find(ViewType.NavigationStack.self)
        XCTAssertEqual(try navigationStack.navigationTitle(), "Portfolio")
    }
    
    func testToolbar_ShowsPlusMenuButton() throws {
        // Given: PortfolioView with portfolio
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When/Then: Should show plus button in toolbar
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "plus"
        }))
    }
    
    // MARK: - Portfolio Header Tests
    
    func testPortfolioHeader_ShowsTotalValue() throws {
        // Given: Portfolio with holdings
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(
            portfolio: portfolio,
            currency: currency,
            quantity: 2.0,
            averageCost: 50000.0
        )
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show total value information
        XCTAssertNoThrow(try rendered.find(text: "Total Value"))
        // Note: Actual value would depend on current price calculation
    }
    
    func testPortfolioHeader_ShowsPerformanceIndicators() throws {
        // Given: Portfolio with profitable holding
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(
            portfolio: portfolio,
            currency: currency,
            quantity: 1.0,
            averageCost: 45000.0 // Lower than current price
        )
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show performance indicators
        XCTAssertNoThrow(try rendered.find(text: "Total Cost"))
        XCTAssertNoThrow(try rendered.find(text: "Holdings"))
        
        // Should show profit/loss arrows
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            let imageName = try image.actualImage().name()
            return imageName == "arrow.up" || imageName == "arrow.down"
        }))
    }
    
    func testPortfolioHeader_ShowsHoldingsCount() throws {
        // Given: Portfolio with multiple holdings
        let btc = createTestCurrency(symbol: "BTC", name: "Bitcoin")
        let eth = createTestCurrency(symbol: "ETH", name: "Ethereum")
        let portfolio = createTestPortfolio()
        
        createTestHolding(portfolio: portfolio, currency: btc)
        createTestHolding(portfolio: portfolio, currency: eth)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show correct holdings count
        XCTAssertNoThrow(try rendered.find(text: "2")) // 2 holdings
    }
    
    // MARK: - Portfolio Selector Tests
    
    func testPortfolioSelector_ShowsCurrentPortfolioName() throws {
        // Given: Portfolio with specific name
        let portfolio = createTestPortfolio(name: "My Crypto Portfolio")
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show portfolio name in selector
        XCTAssertNoThrow(try rendered.find(text: "My Crypto Portfolio"))
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "chevron.down"
        }))
    }
    
    func testPortfolioSelector_WithMultiplePortfolios_ShowsAllOptions() throws {
        // Given: Multiple portfolios
        let portfolio1 = createTestPortfolio(name: "Main Portfolio", isDefault: true)
        let portfolio2 = createTestPortfolio(name: "Trading Portfolio", isDefault: false)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show default portfolio by default
        XCTAssertNoThrow(try rendered.find(text: "Main Portfolio"))
        
        // Note: Menu content testing would require more sophisticated inspection
    }
    
    // MARK: - Performance Section Tests
    
    func testPerformanceSection_ShowsPerformanceTitle() throws {
        // Given: Portfolio with performance data
        let portfolio = createTestPortfolio()
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show performance section
        XCTAssertNoThrow(try rendered.find(text: "Performance"))
    }
    
    func testPerformanceSection_ShowsPeriodSelector() throws {
        // Given: Portfolio with data
        let portfolio = createTestPortfolio()
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show period picker
        XCTAssertNoThrow(try rendered.find(ViewType.Picker.self))
    }
    
    // MARK: - Holdings Section Tests
    
    func testHoldingsSection_WhenEmpty_ShowsEmptyState() throws {
        // Given: Portfolio with no holdings
        let portfolio = createTestPortfolio()
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show empty holdings state
        XCTAssertNoThrow(try rendered.find(text: "No Holdings"))
        XCTAssertNoThrow(try rendered.find(text: "Add your first cryptocurrency holding to start tracking your portfolio"))
        XCTAssertNoThrow(try rendered.find(button: "Add Holding"))
        
        // Should show briefcase icon
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "briefcase"
        }))
    }
    
    func testHoldingsSection_WhenHasHoldings_ShowsHoldingsList() throws {
        // Given: Portfolio with holdings
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(portfolio: portfolio, currency: currency)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show holdings list
        XCTAssertNoThrow(try rendered.find(text: "Holdings"))
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "plus.circle"
        }))
        
        // Should show holding information
        XCTAssertNoThrow(try rendered.find(text: "Bitcoin"))
        XCTAssertNoThrow(try rendered.find(text: "BTC"))
    }
    
    func testHoldingsSection_AddHoldingButton_WhenTapped_ShowsSheet() throws {
        // Given: Portfolio
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When: Tapping add holding button
        let addButton = try rendered.find(button: "Add Holding")
        try addButton.tap()
        
        // Then: Should present add holding sheet
        XCTAssertTrue(true) // Placeholder
    }
    
    // MARK: - Holding Row Tests
    
    func testHoldingRow_ShowsCorrectInformation() throws {
        // Given: Holding with specific data
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(
            portfolio: portfolio,
            currency: currency,
            quantity: 1.5,
            averageCost: 45000.0
        )
        try context.save()
        
        // When: Rendering HoldingRow
        let holdingRow = HoldingRow(holding: holding)
        let rendered = try holdingRow.inspect()
        
        // Then: Should show holding information
        XCTAssertNoThrow(try rendered.find(text: "Bitcoin"))
        XCTAssertNoThrow(try rendered.find(text: "BTC"))
        
        // Should show profit/loss indicator
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            let imageName = try image.actualImage().name()
            return imageName == "arrow.up" || imageName == "arrow.down"
        }))
    }
    
    func testHoldingRow_ShowsCryptocurrencyIcon() throws {
        // Given: Holding
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(portfolio: portfolio, currency: currency)
        
        // When: Rendering HoldingRow
        let holdingRow = HoldingRow(holding: holding)
        let rendered = try holdingRow.inspect()
        
        // Then: Should show cryptocurrency icon or placeholder
        XCTAssertNoThrow(try rendered.find(ViewType.AsyncImage.self))
        
        // Should show fallback circle with symbol
        XCTAssertNoThrow(try rendered.find(ViewType.Circle.self))
    }
    
    // MARK: - Transactions Section Tests
    
    func testTransactionsSection_WhenEmpty_ShowsEmptyState() throws {
        // Given: Portfolio with no transactions
        let portfolio = createTestPortfolio()
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show empty transactions state
        XCTAssertNoThrow(try rendered.find(text: "Recent Transactions"))
        XCTAssertNoThrow(try rendered.find(text: "No Transactions"))
        XCTAssertNoThrow(try rendered.find(button: "Add Transaction"))
    }
    
    func testTransactionsSection_WhenHasTransactions_ShowsRecentList() throws {
        // Given: Portfolio with transactions
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let transaction = createTestTransaction(portfolio: portfolio, currency: currency)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show transactions section
        XCTAssertNoThrow(try rendered.find(text: "Recent Transactions"))
        XCTAssertNoThrow(try rendered.find(text: "View All"))
        
        // Should show transaction information
        XCTAssertNoThrow(try rendered.find(text: "BTC"))
    }
    
    func testTransactionsSection_ViewAllButton_NavigatesToHistory() throws {
        // Given: Portfolio with transactions
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let transaction = createTestTransaction(portfolio: portfolio, currency: currency)
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When: Tapping "View All"
        let viewAllButton = try rendered.find(text: "View All")
        
        // Then: Should have navigation link
        XCTAssertNoThrow(try rendered.find(ViewType.NavigationLink.self))
    }
    
    // MARK: - Transaction Row Tests
    
    func testTransactionRow_ShowsCorrectInformation() throws {
        // Given: Transaction with specific data
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let transaction = createTestTransaction(
            portfolio: portfolio,
            currency: currency,
            type: .buy,
            quantity: 0.5,
            price: 55000.0
        )
        
        // When: Rendering TransactionRow
        let transactionRow = TransactionRow(transaction: transaction)
        let rendered = try transactionRow.inspect()
        
        // Then: Should show transaction information
        XCTAssertNoThrow(try rendered.find(text: "BTC"))
        
        // Should show transaction type icon
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self))
    }
    
    func testTransactionRow_BuyTransaction_ShowsCorrectIcon() throws {
        // Given: Buy transaction
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let transaction = createTestTransaction(
            portfolio: portfolio,
            currency: currency,
            type: .buy
        )
        
        // When: Rendering TransactionRow
        let transactionRow = TransactionRow(transaction: transaction)
        let rendered = try transactionRow.inspect()
        
        // Then: Should show appropriate icon for buy transaction
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self))
    }
    
    func testTransactionRow_SellTransaction_ShowsCorrectIcon() throws {
        // Given: Sell transaction
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let transaction = createTestTransaction(
            portfolio: portfolio,
            currency: currency,
            type: .sell
        )
        
        // When: Rendering TransactionRow
        let transactionRow = TransactionRow(transaction: transaction)
        let rendered = try transactionRow.inspect()
        
        // Then: Should show appropriate icon for sell transaction
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self))
    }
    
    // MARK: - Menu Actions Tests
    
    func testMenuActions_ShowsAllOptions() throws {
        // Given: Portfolio view with menu
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When/Then: Should have menu with all options
        XCTAssertNoThrow(try rendered.find(ViewType.Menu.self))
        
        // Note: Menu content inspection requires more sophisticated testing
    }
    
    // MARK: - Refresh Tests
    
    func testRefreshAction_ReloadsPortfolioData() throws {
        // Given: Portfolio view
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When: Pull to refresh (simulated)
        // Then: Should trigger portfolio reload
        XCTAssertTrue(true) // Placeholder - would test actual refresh action
    }
    
    // MARK: - Performance Tests
    
    func testPerformance_RenderingManyHoldings() throws {
        // Given: Portfolio with many holdings
        let portfolio = createTestPortfolio()
        
        for i in 0..<100 {
            let currency = createTestCurrency(symbol: "CUR\(i)", name: "Currency \(i)")
            createTestHolding(
                portfolio: portfolio,
                currency: currency,
                quantity: Double(i + 1),
                averageCost: Double(1000 + i * 100)
            )
        }
        try context.save()
        
        // When: Measuring rendering performance
        measure {
            let view = PortfolioView()
                .modelContainer(container)
                .environment(portfolioService)
            
            _ = try? view.inspect()
        }
        
        // Then: Should render within performance threshold
    }
    
    func testPerformance_RenderingManyTransactions() throws {
        // Given: Portfolio with many transactions
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        
        for i in 0..<100 {
            createTestTransaction(
                portfolio: portfolio,
                currency: currency,
                type: i % 2 == 0 ? .buy : .sell,
                quantity: Double(i + 1) * 0.1,
                price: Double(50000 + i * 100)
            )
        }
        try context.save()
        
        // When: Measuring rendering performance
        measure {
            let view = PortfolioView()
                .modelContainer(container)
                .environment(portfolioService)
            
            _ = try? view.inspect()
        }
        
        // Then: Should render within performance threshold
    }
    
    // MARK: - Accessibility Tests
    
    func testAccessibility_PortfolioHeaderHasProperLabels() throws {
        // Given: Portfolio with data
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When/Then: Should have accessible elements
        XCTAssertNoThrow(try rendered.find(text: "Total Value"))
        XCTAssertNoThrow(try rendered.find(text: "Total Cost"))
        XCTAssertNoThrow(try rendered.find(text: "Holdings"))
    }
    
    func testAccessibility_ButtonsHaveProperLabels() throws {
        // Given: Portfolio view
        let portfolio = createTestPortfolio()
        try context.save()
        
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // When/Then: Buttons should have proper accessibility
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "plus"
        }))
        XCTAssertNoThrow(try rendered.find(ViewType.Image.self, where: { image in
            try image.actualImage().name() == "plus.circle"
        }))
    }
    
    // MARK: - Data Consistency Tests
    
    func testDataConsistency_PortfolioShowsCorrectTotalValue() throws {
        // Given: Portfolio with specific holdings
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(
            portfolio: portfolio,
            currency: currency,
            quantity: 2.0,
            averageCost: 45000.0
        )
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show correct calculated values
        XCTAssertNoThrow(try rendered.find(text: "Total Value"))
        // Note: Actual value verification would depend on current price calculation
    }
    
    func testDataConsistency_HoldingsShowCorrectQuantities() throws {
        // Given: Holding with specific quantity
        let currency = createTestCurrency()
        let portfolio = createTestPortfolio()
        let holding = createTestHolding(
            portfolio: portfolio,
            currency: currency,
            quantity: 1.25,
            averageCost: 50000.0
        )
        try context.save()
        
        // When: Rendering HoldingRow
        let holdingRow = HoldingRow(holding: holding)
        let rendered = try holdingRow.inspect()
        
        // Then: Should show correct quantity
        // Note: Format depends on the quantityFormatted implementation
        XCTAssertNoThrow(try rendered.find(text: "BTC"))
    }
    
    // MARK: - Edge Cases Tests
    
    func testEdgeCase_PortfolioWithZeroHoldings_ShowsEmptyState() throws {
        // Given: Portfolio with no holdings
        let portfolio = createTestPortfolio()
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show empty holdings state
        XCTAssertNoThrow(try rendered.find(text: "No Holdings"))
    }
    
    func testEdgeCase_MultiplePortfolios_SelectsDefaultFirst() throws {
        // Given: Multiple portfolios with one default
        let defaultPortfolio = createTestPortfolio(name: "Default", isDefault: true)
        let otherPortfolio = createTestPortfolio(name: "Other", isDefault: false)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show default portfolio
        XCTAssertNoThrow(try rendered.find(text: "Default"))
    }
    
    func testEdgeCase_NoDefaultPortfolio_SelectsFirst() throws {
        // Given: Multiple portfolios with no default
        let portfolio1 = createTestPortfolio(name: "First", isDefault: false)
        let portfolio2 = createTestPortfolio(name: "Second", isDefault: false)
        try context.save()
        
        // When: Rendering PortfolioView
        let view = PortfolioView()
            .modelContainer(container)
            .environment(portfolioService)
        
        let rendered = try view.inspect()
        
        // Then: Should show first portfolio
        XCTAssertNoThrow(try rendered.find(text: "First"))
    }
}

// MARK: - Test Framework Extensions

// Simple testing without external dependencies

// MARK: - Mock Extensions for Testing

extension PortfolioService {
    func getPortfolioPerformance(_ portfolio: Portfolio, period: AnalyticsPeriod) async -> PortfolioPerformance? {
        // Mock implementation for testing
        return PortfolioPerformance(
            totalInvested: 100000.0,
            totalWithdrawn: 0.0,
            profitLoss: 15000.0,
            profitLossPercent: 15.0,
            period: period
        )
    }
}

// MARK: - Mock Data Types

struct PortfolioPerformance {
    let totalInvested: Double
    let totalWithdrawn: Double
    let profitLoss: Double
    let profitLossPercent: Double
    let period: AnalyticsPeriod
    
    var isPositive: Bool {
        profitLoss >= 0
    }
    
    var profitLossFormatted: String {
        profitLoss.formatted(.currency(code: "USD"))
    }
}

enum AnalyticsPeriod: String, CaseIterable {
    case week = "1W"
    case month = "1M"
    case quarter = "3M"
    case year = "1Y"
    
    var displayName: String {
        switch self {
        case .week: return "1W"
        case .month: return "1M"
        case .quarter: return "3M"
        case .year: return "1Y"
        }
    }
}

enum TransactionType: String, CaseIterable {
    case buy = "buy"
    case sell = "sell"
    
    var systemImage: String {
        switch self {
        case .buy: return "plus.circle.fill"
        case .sell: return "minus.circle.fill"
        }
    }
}